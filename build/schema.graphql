type FeePayed @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  totalAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewDeposit @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  poolId: Int! # uint8
  plan: Int! # uint8
  apr: BigInt! # uint256
  amount: BigInt! # uint256
  start: BigInt! # uint256
  finish: BigInt! # uint256
  fee: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Newbie @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  registerTime: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Paused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UnStake @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  start: BigInt! # uint256
  amount: BigInt! # uint256
  profit: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdrawn @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  start: BigInt! # uint256
  poolId: BigInt! # uint256
  plan: BigInt! # uint256
  profit: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Pool @entity {
  id: ID!
  stakeAddress: Token!
  rewardAddress: Token!
  totalStaked: BigInt!
  totalReward: BigInt!
}

type Token @entity {
  id: Bytes!
  name: String!
  symbol: String!
  decimals: BigInt!
}

type Term @entity {
  id: ID!
  apr: BigInt!
  time: BigInt!
  totalStaked: BigInt!
  totalReward: BigInt!
}
